{"ast":null,"code":"var _jsxFileName = \"/home/ujjwal.jain/apollo-client/src/pages/login/login.jsx\";\n\n/* eslint-disable no-console */\n\n/* eslint-disable react/destructuring-assignment */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { TextField, Dialog, DialogActions, InputAdornment, Avatar, DialogContent, DialogTitle, Button } from '@material-ui/core';\nimport { withStyles } from '@material-ui/core/styles';\nimport * as yup from 'yup';\nimport EmailIcon from '@material-ui/icons/Email';\nimport callApi from '../../libs/utils/api';\nimport { Redirect } from 'react-router-dom';\nimport { snackbarContext } from '../../contexts/index';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport VisibilityOffIcon from '@material-ui/icons/VisibilityOff';\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\n\nconst styling = theme => ({\n  Content: {\n    display: 'flex',\n    flexDirection: 'column',\n    flex: 1\n  },\n  root: {\n    marginLeft: theme.spacing(16),\n    backgroundColor: theme.palette.secondary.main\n  },\n  Demo: {\n    flex: 1\n  }\n});\n\nclass Login extends React.Component {\n  constructor(props) {\n    super(props);\n    this.schema = yup.object().shape({\n      email: yup.string().email().required('Email is required'),\n      password: yup.string().required('password is required').matches(/^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#?&])[A-Za-z\\d@$!%*#?&]{8,}$/, 'must contain 8 characters at least one \\n uppercase one lowercase and one number')\n    });\n\n    this.handleChange = key => ({\n      target: {\n        value\n      }\n    }) => {\n      this.setState({\n        [key]: value\n      });\n    };\n\n    this.getError = field => {\n      const {\n        touched,\n        error\n      } = this.state;\n\n      if (touched[field]) {\n        this.schema.validateAt(field, this.state).then(() => {\n          if (error[field] !== '') {\n            this.setState({\n              error: { ...error,\n                [field]: ''\n              }\n            }, () => {\n              this.hasErrors();\n            });\n          }\n        }).catch(err => {\n          if (err.message !== error[field]) {\n            this.setState({\n              error: { ...error,\n                [field]: err.message\n              }\n            }, () => {\n              this.hasErrors();\n            });\n          }\n        });\n      }\n\n      return error[field];\n    };\n\n    this.onClickHandler = async value => {\n      const {\n        email,\n        password\n      } = this.state;\n      const {\n        loginUser\n      } = this.props;\n      await this.setState({\n        disabled: true,\n        loader: true\n      });\n      const response = await callApi('post', '/user/login', {\n        data: {\n          email,\n          password\n        }\n      });\n\n      if (response.status === 'ok') {\n        localStorage.setItem('token', response.data);\n        await loginUser({\n          variables: {\n            email,\n            password\n          }\n        });\n        this.setState({\n          redirect: true\n        });\n      } else {\n        value(response.message, 'error');\n      }\n\n      this.setState({\n        disabled: false,\n        loader: false\n      });\n    };\n\n    this.isTouched = field => {\n      const {\n        touched\n      } = this.state;\n      this.setState({\n        touched: { ...touched,\n          [field]: true\n        }\n      }, () => {\n        this.hasErrors();\n      });\n    };\n\n    this.hasErrors = () => {\n      const {\n        error,\n        touched\n      } = this.state;\n      let alltouched = Object.values(touched);\n      let iserror = Object.values(error);\n      iserror = iserror.filter(errorMessage => errorMessage !== '');\n      alltouched = alltouched.every(value => value);\n      iserror = iserror.every(value => value === '');\n\n      if (iserror && alltouched) {\n        this.setState({\n          disabled: false\n        });\n      } else {\n        this.setState({\n          disabled: true\n        });\n      }\n    };\n\n    this.renderRedirect = () => {\n      const {\n        redirect\n      } = this.state;\n\n      if (redirect) {\n        return /*#__PURE__*/React.createElement(Redirect, {\n          to: \"/trainee\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 174,\n            columnNumber: 14\n          }\n        });\n      }\n    };\n\n    this.state = {\n      loader: false,\n      disabled: true,\n      redirect: false,\n      email: '',\n      password: '',\n      touched: {\n        email: false,\n        password: false\n      },\n      error: {\n        email: '',\n        password: ''\n      }\n    };\n  }\n\n  render() {\n    const {\n      classes\n    } = this.props;\n    const {\n      error,\n      disabled,\n      loader\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.Content,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Dialog, {\n      open: true,\n      \"aria-labelledby\": \"form-dialog-title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Avatar, {\n      className: classes.root,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(LockOutlinedIcon, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 13\n      }\n    })), /*#__PURE__*/React.createElement(DialogTitle, {\n      id: \"form-dialog-title\",\n      align: \"center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 11\n      }\n    }, \"Login\"), /*#__PURE__*/React.createElement(DialogContent, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(TextField, {\n      id: \"email\",\n      error: !!error.email,\n      label: \"EmailAddress\",\n      type: \"email\",\n      variant: \"outlined\",\n      onChange: this.handleChange('email'),\n      helperText: this.getError('email'),\n      onBlur: () => this.isTouched('email'),\n      InputProps: {\n        startAdornment: /*#__PURE__*/React.createElement(InputAdornment, {\n          position: \"start\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 202,\n            columnNumber: 19\n          }\n        }, /*#__PURE__*/React.createElement(EmailIcon, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 203,\n            columnNumber: 21\n          }\n        }))\n      },\n      fullWidth: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.Demo,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(TextField, {\n      id: \"password\",\n      error: !!error.password,\n      label: \"password\",\n      type: \"password\",\n      variant: \"outlined\",\n      onChange: this.handleChange('password'),\n      helperText: this.getError('password'),\n      onBlur: () => this.isTouched('password'),\n      InputProps: {\n        startAdornment: /*#__PURE__*/React.createElement(InputAdornment, {\n          position: \"start\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 223,\n            columnNumber: 21\n          }\n        }, /*#__PURE__*/React.createElement(VisibilityOffIcon, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 224,\n            columnNumber: 23\n          }\n        }))\n      },\n      fullWidth: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 15\n      }\n    }))), /*#__PURE__*/React.createElement(DialogActions, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(snackbarContext.Consumer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 13\n      }\n    }, value => /*#__PURE__*/React.createElement(Button, {\n      color: \"primary\",\n      variant: \"contained\",\n      onClick: () => this.onClickHandler(value),\n      disabled: disabled,\n      fullWidth: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 17\n      }\n    }, this.renderRedirect(), /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 19\n      }\n    }, loader ? /*#__PURE__*/React.createElement(CircularProgress, {\n      size: 20,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 35\n      }\n    }) : ''), \"SIGNIN\")))));\n  }\n\n}\n\nLogin.propTypes = {\n  classes: PropTypes.objectOf(PropTypes.string).isRequired\n};\nexport default withStyles(styling)(Login);","map":{"version":3,"sources":["/home/ujjwal.jain/apollo-client/src/pages/login/login.jsx"],"names":["React","PropTypes","TextField","Dialog","DialogActions","InputAdornment","Avatar","DialogContent","DialogTitle","Button","withStyles","yup","EmailIcon","callApi","Redirect","snackbarContext","CircularProgress","VisibilityOffIcon","LockOutlinedIcon","styling","theme","Content","display","flexDirection","flex","root","marginLeft","spacing","backgroundColor","palette","secondary","main","Demo","Login","Component","constructor","props","schema","object","shape","email","string","required","password","matches","handleChange","key","target","value","setState","getError","field","touched","error","state","validateAt","then","hasErrors","catch","err","message","onClickHandler","loginUser","disabled","loader","response","data","status","localStorage","setItem","variables","redirect","isTouched","alltouched","Object","values","iserror","filter","errorMessage","every","renderRedirect","render","classes","startAdornment","propTypes","objectOf","isRequired"],"mappings":";;AAAA;;AACA;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SACEC,SADF,EAEEC,MAFF,EAGEC,aAHF,EAIEC,cAJF,EAKEC,MALF,EAMEC,aANF,EAOEC,WAPF,EAQEC,MARF,QASO,mBATP;AAUA,SAASC,UAAT,QAA2B,0BAA3B;AACA,OAAO,KAAKC,GAAZ,MAAqB,KAArB;AACA,OAAOC,SAAP,MAAsB,0BAAtB;AACA,OAAOC,OAAP,MAAoB,sBAApB;AACA,SAASC,QAAT,QAAyB,kBAAzB;AACA,SAASC,eAAT,QAAgC,sBAAhC;AACA,OAAOC,gBAAP,MAA6B,oCAA7B;AACA,OAAOC,iBAAP,MAA8B,kCAA9B;AACA,OAAOC,gBAAP,MAA6B,iCAA7B;;AAEA,MAAMC,OAAO,GAAIC,KAAD,KAAY;AAC1BC,EAAAA,OAAO,EAAE;AACPC,IAAAA,OAAO,EAAE,MADF;AAEPC,IAAAA,aAAa,EAAE,QAFR;AAGPC,IAAAA,IAAI,EAAE;AAHC,GADiB;AAM1BC,EAAAA,IAAI,EAAE;AACJC,IAAAA,UAAU,EAAEN,KAAK,CAACO,OAAN,CAAc,EAAd,CADR;AAEJC,IAAAA,eAAe,EAAER,KAAK,CAACS,OAAN,CAAcC,SAAd,CAAwBC;AAFrC,GANoB;AAU1BC,EAAAA,IAAI,EAAE;AACJR,IAAAA,IAAI,EAAE;AADF;AAVoB,CAAZ,CAAhB;;AAcA,MAAMS,KAAN,SAAoBjC,KAAK,CAACkC,SAA1B,CAAoC;AAWlCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AADiB,SAVnBC,MAUmB,GAVV1B,GAAG,CAAC2B,MAAJ,GAAaC,KAAb,CAAmB;AAC1BC,MAAAA,KAAK,EAAE7B,GAAG,CAAC8B,MAAJ,GAAaD,KAAb,GAAqBE,QAArB,CAA8B,mBAA9B,CADmB;AAE1BC,MAAAA,QAAQ,EAAEhC,GAAG,CACV8B,MADO,GAEPC,QAFO,CAEE,sBAFF,EAGPE,OAHO,CAIN,gEAJM,EAKN,kFALM;AAFgB,KAAnB,CAUU;;AAAA,SAmBnBC,YAnBmB,GAmBHC,GAAD,IAAS,CAAC;AAAEC,MAAAA,MAAM,EAAE;AAAEC,QAAAA;AAAF;AAAV,KAAD,KAA2B;AACjD,WAAKC,QAAL,CAAc;AAAE,SAACH,GAAD,GAAOE;AAAT,OAAd;AACD,KArBkB;;AAAA,SAwBnBE,QAxBmB,GAwBPC,KAAD,IAAW;AACpB,YAAM;AAAEC,QAAAA,OAAF;AAAWC,QAAAA;AAAX,UAAqB,KAAKC,KAAhC;;AACA,UAAIF,OAAO,CAACD,KAAD,CAAX,EAAoB;AAClB,aAAKd,MAAL,CACGkB,UADH,CACcJ,KADd,EACqB,KAAKG,KAD1B,EAEGE,IAFH,CAEQ,MAAM;AACV,cAAIH,KAAK,CAACF,KAAD,CAAL,KAAiB,EAArB,EAAyB;AACvB,iBAAKF,QAAL,CACE;AACEI,cAAAA,KAAK,EAAE,EACL,GAAGA,KADE;AAEL,iBAACF,KAAD,GAAS;AAFJ;AADT,aADF,EAOE,MAAM;AACJ,mBAAKM,SAAL;AACD,aATH;AAWD;AACF,SAhBH,EAiBGC,KAjBH,CAiBUC,GAAD,IAAS;AACd,cAAIA,GAAG,CAACC,OAAJ,KAAgBP,KAAK,CAACF,KAAD,CAAzB,EAAkC;AAChC,iBAAKF,QAAL,CACE;AACEI,cAAAA,KAAK,EAAE,EACL,GAAGA,KADE;AAEL,iBAACF,KAAD,GAASQ,GAAG,CAACC;AAFR;AADT,aADF,EAOE,MAAM;AACJ,mBAAKH,SAAL;AACD,aATH;AAWD;AACF,SA/BH;AAgCD;;AACD,aAAOJ,KAAK,CAACF,KAAD,CAAZ;AACD,KA7DkB;;AAAA,SA+DnBU,cA/DmB,GA+DF,MAAOb,KAAP,IAAiB;AAChC,YAAM;AAAER,QAAAA,KAAF;AAASG,QAAAA;AAAT,UAAsB,KAAKW,KAAjC;AACA,YAAM;AAACQ,QAAAA;AAAD,UAAe,KAAK1B,KAA1B;AACA,YAAM,KAAKa,QAAL,CAAc;AAClBc,QAAAA,QAAQ,EAAE,IADQ;AAElBC,QAAAA,MAAM,EAAE;AAFU,OAAd,CAAN;AAIA,YAAMC,QAAQ,GAAG,MAAMpD,OAAO,CAAC,MAAD,EAAS,aAAT,EAAwB;AACpDqD,QAAAA,IAAI,EAAE;AAAE1B,UAAAA,KAAF;AAASG,UAAAA;AAAT;AAD8C,OAAxB,CAA9B;;AAGA,UAAIsB,QAAQ,CAACE,MAAT,KAAoB,IAAxB,EAA8B;AAC5BC,QAAAA,YAAY,CAACC,OAAb,CAAqB,OAArB,EAA8BJ,QAAQ,CAACC,IAAvC;AACA,cAAMJ,SAAS,CAAC;AAAEQ,UAAAA,SAAS,EAAE;AAAC9B,YAAAA,KAAD;AAAQG,YAAAA;AAAR;AAAb,SAAD,CAAf;AACA,aAAKM,QAAL,CAAc;AACZsB,UAAAA,QAAQ,EAAE;AADE,SAAd;AAGD,OAND,MAMO;AACLvB,QAAAA,KAAK,CAACiB,QAAQ,CAACL,OAAV,EAAmB,OAAnB,CAAL;AACD;;AACD,WAAKX,QAAL,CAAc;AACZc,QAAAA,QAAQ,EAAE,KADE;AAEZC,QAAAA,MAAM,EAAE;AAFI,OAAd;AAID,KAtFkB;;AAAA,SAwFnBQ,SAxFmB,GAwFNrB,KAAD,IAAW;AACrB,YAAM;AAAEC,QAAAA;AAAF,UAAc,KAAKE,KAAzB;AACA,WAAKL,QAAL,CACE;AACEG,QAAAA,OAAO,EAAE,EACP,GAAGA,OADI;AAEP,WAACD,KAAD,GAAS;AAFF;AADX,OADF,EAOE,MAAM;AACJ,aAAKM,SAAL;AACD,OATH;AAWD,KArGkB;;AAAA,SAuGnBA,SAvGmB,GAuGP,MAAM;AAChB,YAAM;AAAEJ,QAAAA,KAAF;AAASD,QAAAA;AAAT,UAAqB,KAAKE,KAAhC;AACA,UAAImB,UAAU,GAAGC,MAAM,CAACC,MAAP,CAAcvB,OAAd,CAAjB;AACA,UAAIwB,OAAO,GAAGF,MAAM,CAACC,MAAP,CAActB,KAAd,CAAd;AACAuB,MAAAA,OAAO,GAAGA,OAAO,CAACC,MAAR,CAAgBC,YAAD,IAAkBA,YAAY,KAAK,EAAlD,CAAV;AACAL,MAAAA,UAAU,GAAGA,UAAU,CAACM,KAAX,CAAkB/B,KAAD,IAAWA,KAA5B,CAAb;AACA4B,MAAAA,OAAO,GAAGA,OAAO,CAACG,KAAR,CAAe/B,KAAD,IAAWA,KAAK,KAAK,EAAnC,CAAV;;AACA,UAAI4B,OAAO,IAAIH,UAAf,EAA2B;AACzB,aAAKxB,QAAL,CAAc;AACZc,UAAAA,QAAQ,EAAE;AADE,SAAd;AAGD,OAJD,MAIO;AACL,aAAKd,QAAL,CAAc;AACZc,UAAAA,QAAQ,EAAE;AADE,SAAd;AAGD;AACF,KAvHkB;;AAAA,SAyHnBiB,cAzHmB,GAyHF,MAAM;AACrB,YAAM;AAAET,QAAAA;AAAF,UAAe,KAAKjB,KAA1B;;AACA,UAAIiB,QAAJ,EAAc;AACZ,4BAAO,oBAAC,QAAD;AAAU,UAAA,EAAE,EAAC,UAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACD;AACF,KA9HkB;;AAEjB,SAAKjB,KAAL,GAAa;AACXU,MAAAA,MAAM,EAAE,KADG;AAEXD,MAAAA,QAAQ,EAAE,IAFC;AAGXQ,MAAAA,QAAQ,EAAE,KAHC;AAIX/B,MAAAA,KAAK,EAAE,EAJI;AAKXG,MAAAA,QAAQ,EAAE,EALC;AAMXS,MAAAA,OAAO,EAAE;AACPZ,QAAAA,KAAK,EAAE,KADA;AAEPG,QAAAA,QAAQ,EAAE;AAFH,OANE;AAUXU,MAAAA,KAAK,EAAE;AACLb,QAAAA,KAAK,EAAE,EADF;AAELG,QAAAA,QAAQ,EAAE;AAFL;AAVI,KAAb;AAeD;;AA+GDsC,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEC,MAAAA;AAAF,QAAc,KAAK9C,KAAzB;AACA,UAAM;AAAEiB,MAAAA,KAAF;AAASU,MAAAA,QAAT;AAAmBC,MAAAA;AAAnB,QAA8B,KAAKV,KAAzC;AACA,wBACE;AAAK,MAAA,SAAS,EAAE4B,OAAO,CAAC7D,OAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,MAAD;AAAQ,MAAA,IAAI,MAAZ;AAAa,yBAAgB,mBAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,MAAD;AAAQ,MAAA,SAAS,EAAE6D,OAAO,CAACzD,IAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,gBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CADF,eAIE,oBAAC,WAAD;AAAa,MAAA,EAAE,EAAC,mBAAhB;AAAoC,MAAA,KAAK,EAAC,QAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAJF,eAOE,oBAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,SAAD;AACE,MAAA,EAAE,EAAC,OADL;AAEE,MAAA,KAAK,EAAE,CAAC,CAAC4B,KAAK,CAACb,KAFjB;AAGE,MAAA,KAAK,EAAC,cAHR;AAIE,MAAA,IAAI,EAAC,OAJP;AAKE,MAAA,OAAO,EAAC,UALV;AAME,MAAA,QAAQ,EAAE,KAAKK,YAAL,CAAkB,OAAlB,CANZ;AAOE,MAAA,UAAU,EAAE,KAAKK,QAAL,CAAc,OAAd,CAPd;AAQE,MAAA,MAAM,EAAE,MAAM,KAAKsB,SAAL,CAAe,OAAf,CARhB;AASE,MAAA,UAAU,EAAE;AACVW,QAAAA,cAAc,eACZ,oBAAC,cAAD;AAAgB,UAAA,QAAQ,EAAC,OAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBACE,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAFQ,OATd;AAgBE,MAAA,SAAS,MAhBX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,eAmBE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAnBF,eAoBE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MApBF,eAqBE;AAAK,MAAA,SAAS,EAAED,OAAO,CAAClD,IAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,SAAD;AACE,MAAA,EAAE,EAAC,UADL;AAEE,MAAA,KAAK,EAAE,CAAC,CAACqB,KAAK,CAACV,QAFjB;AAGE,MAAA,KAAK,EAAC,UAHR;AAIE,MAAA,IAAI,EAAC,UAJP;AAKE,MAAA,OAAO,EAAC,UALV;AAME,MAAA,QAAQ,EAAE,KAAKE,YAAL,CAAkB,UAAlB,CANZ;AAOE,MAAA,UAAU,EAAE,KAAKK,QAAL,CAAc,UAAd,CAPd;AAQE,MAAA,MAAM,EAAE,MAAM,KAAKsB,SAAL,CAAe,UAAf,CARhB;AASE,MAAA,UAAU,EAAE;AACVW,QAAAA,cAAc,eACZ,oBAAC,cAAD;AAAgB,UAAA,QAAQ,EAAC,OAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBACE,oBAAC,iBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAFQ,OATd;AAgBE,MAAA,SAAS,MAhBX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CArBF,CAPF,eAiDE,oBAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,eAAD,CAAiB,QAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACInC,KAAD,iBACC,oBAAC,MAAD;AACE,MAAA,KAAK,EAAC,SADR;AAEE,MAAA,OAAO,EAAC,WAFV;AAGE,MAAA,OAAO,EAAE,MAAM,KAAKa,cAAL,CAAoBb,KAApB,CAHjB;AAIE,MAAA,QAAQ,EAAEe,QAJZ;AAKE,MAAA,SAAS,MALX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAOG,KAAKiB,cAAL,EAPH,eAQE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAOhB,MAAM,gBAAG,oBAAC,gBAAD;AAAkB,MAAA,IAAI,EAAE,EAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAH,GAAoC,EAAjD,CARF,WAFJ,CADF,CAjDF,CADF,CADF;AAuED;;AArNiC;;AAuNpC/B,KAAK,CAACmD,SAAN,GAAkB;AAChBF,EAAAA,OAAO,EAAEjF,SAAS,CAACoF,QAAV,CAAmBpF,SAAS,CAACwC,MAA7B,EAAqC6C;AAD9B,CAAlB;AAGA,eAAe5E,UAAU,CAACS,OAAD,CAAV,CAAoBc,KAApB,CAAf","sourcesContent":["/* eslint-disable no-console */\n/* eslint-disable react/destructuring-assignment */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  TextField,\n  Dialog,\n  DialogActions,\n  InputAdornment,\n  Avatar,\n  DialogContent,\n  DialogTitle,\n  Button,\n} from '@material-ui/core';\nimport { withStyles } from '@material-ui/core/styles';\nimport * as yup from 'yup';\nimport EmailIcon from '@material-ui/icons/Email';\nimport callApi from '../../libs/utils/api';\nimport { Redirect } from 'react-router-dom';\nimport { snackbarContext } from '../../contexts/index';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport VisibilityOffIcon from '@material-ui/icons/VisibilityOff';\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\n\nconst styling = (theme) => ({\n  Content: {\n    display: 'flex',\n    flexDirection: 'column',\n    flex: 1,\n  },\n  root: {\n    marginLeft: theme.spacing(16),\n    backgroundColor: theme.palette.secondary.main,\n  },\n  Demo: {\n    flex: 1,\n  },\n});\nclass Login extends React.Component {\n  schema = yup.object().shape({\n    email: yup.string().email().required('Email is required'),\n    password: yup\n      .string()\n      .required('password is required')\n      .matches(\n        /^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#?&])[A-Za-z\\d@$!%*#?&]{8,}$/,\n        'must contain 8 characters at least one \\n uppercase one lowercase and one number'\n      ),\n  });\n  constructor(props) {\n    super(props);\n    this.state = {\n      loader: false,\n      disabled: true,\n      redirect: false,\n      email: '',\n      password: '',\n      touched: {\n        email: false,\n        password: false,\n      },\n      error: {\n        email: '',\n        password: '',\n      },\n    };\n  }\n\n  handleChange = (key) => ({ target: { value } }) => {\n    this.setState({ [key]: value });\n  };\n\n  // eslint-disable-next-line consistent-return\n  getError = (field) => {\n    const { touched, error } = this.state;\n    if (touched[field]) {\n      this.schema\n        .validateAt(field, this.state)\n        .then(() => {\n          if (error[field] !== '') {\n            this.setState(\n              {\n                error: {\n                  ...error,\n                  [field]: '',\n                },\n              },\n              () => {\n                this.hasErrors();\n              }\n            );\n          }\n        })\n        .catch((err) => {\n          if (err.message !== error[field]) {\n            this.setState(\n              {\n                error: {\n                  ...error,\n                  [field]: err.message,\n                },\n              },\n              () => {\n                this.hasErrors();\n              }\n            );\n          }\n        });\n    }\n    return error[field];\n  };\n\n  onClickHandler = async (value) => {\n    const { email, password } = this.state;\n    const {loginUser } = this.props;\n    await this.setState({\n      disabled: true,\n      loader: true,\n    });\n    const response = await callApi('post', '/user/login', {\n      data: { email, password },\n    });\n    if (response.status === 'ok') {\n      localStorage.setItem('token', response.data);\n      await loginUser({ variables: {email, password }});\n      this.setState({\n        redirect: true,\n      });\n    } else {\n      value(response.message, 'error');\n    }\n    this.setState({\n      disabled: false,\n      loader: false,\n    });\n  };\n\n  isTouched = (field) => {\n    const { touched } = this.state;\n    this.setState(\n      {\n        touched: {\n          ...touched,\n          [field]: true,\n        },\n      },\n      () => {\n        this.hasErrors();\n      }\n    );\n  };\n\n  hasErrors = () => {\n    const { error, touched } = this.state;\n    let alltouched = Object.values(touched);\n    let iserror = Object.values(error);\n    iserror = iserror.filter((errorMessage) => errorMessage !== '');\n    alltouched = alltouched.every((value) => value);\n    iserror = iserror.every((value) => value === '');\n    if (iserror && alltouched) {\n      this.setState({\n        disabled: false,\n      });\n    } else {\n      this.setState({\n        disabled: true,\n      });\n    }\n  };\n\n  renderRedirect = () => {\n    const { redirect } = this.state;\n    if (redirect) {\n      return <Redirect to='/trainee' />;\n    }\n  };\n\n  render() {\n    const { classes } = this.props;\n    const { error, disabled, loader } = this.state;\n    return (\n      <div className={classes.Content}>\n        <Dialog open aria-labelledby='form-dialog-title'>\n          <Avatar className={classes.root}>\n            <LockOutlinedIcon />\n          </Avatar>\n          <DialogTitle id='form-dialog-title' align='center'>\n            Login\n          </DialogTitle>\n          <DialogContent>\n            <TextField\n              id='email'\n              error={!!error.email}\n              label='EmailAddress'\n              type='email'\n              variant='outlined'\n              onChange={this.handleChange('email')}\n              helperText={this.getError('email')}\n              onBlur={() => this.isTouched('email')}\n              InputProps={{\n                startAdornment: (\n                  <InputAdornment position='start'>\n                    <EmailIcon />\n                  </InputAdornment>\n                ),\n              }}\n              fullWidth\n            />\n            <br />\n            <br />\n            <div className={classes.Demo}>\n              <TextField\n                id='password'\n                error={!!error.password}\n                label='password'\n                type='password'\n                variant='outlined'\n                onChange={this.handleChange('password')}\n                helperText={this.getError('password')}\n                onBlur={() => this.isTouched('password')}\n                InputProps={{\n                  startAdornment: (\n                    <InputAdornment position='start'>\n                      <VisibilityOffIcon />\n                    </InputAdornment>\n                  ),\n                }}\n                fullWidth\n              />\n            </div>\n          </DialogContent>\n          <DialogActions>\n            <snackbarContext.Consumer>\n              {(value) => (\n                <Button\n                  color='primary'\n                  variant='contained'\n                  onClick={() => this.onClickHandler(value)}\n                  disabled={disabled}\n                  fullWidth\n                >\n                  {this.renderRedirect()}\n                  <span>{loader ? <CircularProgress size={20} /> : ''}</span>\n                  SIGNIN\n                </Button>\n              )}\n            </snackbarContext.Consumer>\n          </DialogActions>\n        </Dialog>\n      </div>\n    );\n  }\n}\nLogin.propTypes = {\n  classes: PropTypes.objectOf(PropTypes.string).isRequired,\n};\nexport default withStyles(styling)(Login);\n"]},"metadata":{},"sourceType":"module"}